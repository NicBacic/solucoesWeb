// Generated by CoffeeScript 1.9.3

  var handleLocationError, initMap, map;

  var markersArray = [];

  handleLocationError = void 0;

  initMap = void 0;

  map = void 0;

  //Function called once app is started. It creates Google Map with GeoLocation
  initMap = function() {
    var infoWindow;
    infoWindow = void 0;

    //Create map with 17 zoom centered in São Paulo. If you wish to change the place, just change lat and lng for the
    //place you like. And if you want a blank map, or a custom map, look at google maps API here:
    // https://developers.google.com/maps/documentation/javascript/maptypes?hl=en#CustomMapTypes
    map = new google.maps.Map(document.getElementById('map'), {
      center: {
        lat: -23.5489,
        lng: -46.6388
      },
      zoom: 17
    }); //end map creation

    /*InfoWindow is used to popup a message in a marker
    infoWindow = new google.maps.InfoWindow({
      map: map
    });*/

    //If browser has a Geolocator, than we set the center of the map in its location
    if (navigator.geolocation) {

      //Get Current position
      navigator.geolocation.getCurrentPosition((function(position) {
        var marker, pos;
        marker = void 0;
        pos = void 0;
        pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        /* Info Window
        infoWindow.setPosition(pos);
        infoWindow.setContent('Localização encontrada');
        */

        //Change maps center position
        map.setCenter(pos);

        //Set a marker in it position
        marker = new google.maps.Marker({
          position: pos,
          map: map
        });

        markersArray.push(marker);

        //Then we call handleLocationError if the browser doesn't support geolocation. This function shows the user this information.
      }), function() {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      handleLocationError(false, infoWindow, map.getCenter());
    }

    

  }; //end initMap


  handleLocationError = function(browserHasGeolocation, infoWindow, pos) {
    infoWindow = new google.maps.InfoWindow({
      map: map
    });
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ? 'Erro: O serviço de Geolocalização falhou.' : 'Erro: Seu browser ou dispositivo não suportam essa funcionalidade');
  };

  /*Now, if bus options is selected, then, for each bus stop in determined ratio, we add a marker in the map.
  /*The Current method get every bus stop or moving bus and create a google maps marker for each one.
  /*If you want to do small searches, due to performance issues, it's better to provide specific ratio
  /* and create markers just for busses in it.*/

  function busOptions(str){
      //console.log("Option " + str + " selected");
      deleteMarkers();

      //No Option Selected, just clear the current marks
      if (str == "") {
        console.log("Clearing Marks..."); //clear marks
      } else { 


        /* Option "Bus Stops"
        /* We use the recovered data from GFHS saved in Stops Model and
        /* Then we use Lat and Long from each bus stop to create a marker for them */
        if (str == "1"){
          
          var stops = $('#stops').data('stops');

          for(var i = 0; i < stops.length; i++){
              marker = 
                {
                  coords:{lat:stops[i].stop_lat,lng:stops[i].stop_long},
                  //content: If you wish, you could put bus ID or some stuff like that here.
                };
              addMarker(marker);
              //console.log(i);
          }//end for

        } else { 
        
        /*Create a Mark for each moving bus and renders it in the map*/

        console.log("Option 2 Selected");
        get_all_bus_position();

      } // end elsif
    } // end else
  } //end function busOptions



  /*GET Posicao return a json with the following content
  {
    "hr": "11:30",
    "l": [
      {
        "c": "5015-10",
        "cl": 33887,
        "sl": 2,
        "lt0": "METRÔ JABAQUARA",
        "lt1": "JD. SÃO JORGE",
        "qv": 1,
        "vs": [
          {
            "p":68021,
            "a":true,
            "ta":"2017-05-12T14:30:37Z",
            "py":-23.678712500000003,
            "px":-46.65674
          }
        ]
      }
    ]
  }*/

  function get_all_bus_position(){

    $( document ).ready(function() {
      $.ajax({
          url: 'home/get_all_bus_position',
          type: 'GET',    
          dataType: 'json',
          success: function (value, data) {
            console.log(data);
            if (value == null) {
              alert('Nenhum ônibus em movimento no momento. Clique em atualizar em alguns minutos');
              return;
            }
  
            var lat, long, i, j = 0;
            var numBus = "";
            
            var horario = $.parseJSON(value.file_content);
            for(i = 0; i < horario.l.length; i++){
              numBus = horario.l[i].c;
              for(j = 0; j < horario.l[i].vs.length; j++){
                long = horario.l[i].vs[j].px;
                lat = horario.l[i].vs[j].py;
               
                marker = 
                {
                  coords:{lat: lat, lng:long},
                  icon: 'https://fonts.googleapis.com/icon?family=directions_bus',
                  content: numBus//content: If you wish, you could put bus ID or some stuff like that here.
                };
                addMarker(marker);
                //console.log("I = " + i + " J = " + j);
                }//end for j
              } //end for i
       
            
          },
          error: function () {
            alert('error');
          }
      }); 
    });
  }  


 // Add Marker Function
  function addMarker(props){
    var marker = new google.maps.Marker({
      position:props.coords,
      map:map
    });
    

    /*If you wish to customize your icons, put some content
    or add some listener, you should use the code below.*/
            

    /*##################################################################################################*/
    // Check for customization
    if(props.iconImage){
      // Set icon image
      marker.setIcon(props.iconImage);
    }

    //Check content
    if(props.content){
      var infoWindow = new google.maps.InfoWindow({
        content:props.content
      });

      marker.addListener('click', function(){
        infoWindow.open(map, marker);
      }); 

    } // end if props.content
    /*##################################################################################################*/


    //After creating your marker we should add it to the markers Array
    markersArray.push(marker);

 } //end function addmarker()

 function clearMarkers() {
   setMapOnAll(null);
 }

 function deleteMarkers() {
   clearMarkers();
   markersArray = [];
   
 }

  function setMapOnAll(map) {
    //console.log("Delete Markers. Size = " + markersArray.length); //Debug code
    for (var i = 0; i < markersArray.length; i++) {
      markersArray[i].setMap(map);
    }
  }


  function searchAddress(){
    var input = document.getElementById('endereco');
    var searchBox = new google.maps.places.SearchBox(input);
    
    deleteMarkers();

    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      deleteMarkers();

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markersArray.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      }); //end function bounds

      map.fitBounds(bounds);
    });//end searchBox Listener

  }//end searchAddress Function

