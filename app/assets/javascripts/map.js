// Generated by CoffeeScript 1.9.3

  var handleLocationError, initMap, map;

  var markersArray = [];

  handleLocationError = void 0;

  initMap = void 0;

  map = void 0;

  //Function called once app is started. It creates Google Map with GeoLocation
  initMap = function() {
    var infoWindow;
    infoWindow = void 0;

    //Create map with 17 zoom centered in São Paulo
    map = new google.maps.Map(document.getElementById('map'), {
      center: {
        lat: -23.5489,
        lng: -46.6388
      },
      zoom: 17
    }); //end map creation

    //InfoWindow is used to popup a message in a marker
    infoWindow = new google.maps.InfoWindow({
      map: map
    });

    //If browser has a Geolocator, than we set the center of the map in its location
    if (navigator.geolocation) {

      //Get Current position
      navigator.geolocation.getCurrentPosition((function(position) {
        var marker, pos;
        marker = void 0;
        pos = void 0;
        pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        //Change maps center position
        infoWindow.setPosition(pos);
        infoWindow.setContent('Localização encontrada');
        map.setCenter(pos);

        //Set a marker in it position
        marker = new google.maps.Marker({
          position: pos,
          map: map
        });

        markersArray.push(marker);

        //Then we call handleLocationError if the browser doesn't support geolocation. This function shows the user this information.
      }), function() {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      handleLocationError(false, infoWindow, map.getCenter());
    }

    

  }; //end initMap


  handleLocationError = function(browserHasGeolocation, infoWindow, pos) {
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ? 'Erro: O serviço de Geolocalização falhou.' : 'Erro: Seu browser ou dispositivo não suportam essa funcionalidade');
  };

//Now, if bus options is selected, then, for each bus stop in determined ratio, we add a marker in the map.
  function busOptions(str){
      console.log("Option " + str + " selected");
      if (str == "") {
        deleteMarkers(); //clear marks
      } else { 

        if (str == "1"){
          deleteMarkers();
          var stops = $('#stops').data('stops');

          for(var i = 0; i < stops.length; i++){
              marker = 
                {
                  coords:{lat:stops[i].stop_lat,lng:stops[i].stop_long},
                  //content:'<h2>Bus Stop 1</h2>'
                };
              addMarker(marker);
              console.log(i);
          }

          // Add Marker Function
          function addMarker(props){
            var marker = new google.maps.Marker({
              position:props.coords,
              map:map,
              //icon:props.iconImage
            });

            // Check for customicon
            /*if(props.iconImage){
              // Set icon image
              marker.setIcon(props.iconImage);
            }

            // Check content
            if(props.content){
              var infoWindow = new google.maps.InfoWindow({
                content:props.content
              });

              marker.addListener('click', function(){
                infoWindow.open(map, marker);
              });
            }  end if props*/

            markersArray.push(marker);
          } //end function add marker
        }// end if

      else {
        deleteMarkers();
      }
    } // end else
  } //end function busOptions


 function clearMarkers() {
   setMapOnAll(null);
 }

 function deleteMarkers() {
   clearMarkers();
   markersArray = [];
   
 }

  function setMapOnAll(map) {
    //console.log("Delete Markers. Size = " + markersArray.length);
    for (var i = 0; i < markersArray.length; i++) {
      markersArray[i].setMap(map);
    }
  }


  function searchAddress(){
    var input = document.getElementById('endereco');
    var searchBox = new google.maps.places.SearchBox(input);
    
    deleteMarkers();

    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      deleteMarkers();

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markersArray.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      }); //end function bounds

      map.fitBounds(bounds);
    });//end searchBox Listener

  }//end searchAddress Function

